substitutions:
  devicename: "presence-espld2410b-01" #Rename the device what you want.
  upper_devicename: mRadar01 #Rename the device what you want.
esphome:
  name: $devicename

  

  includes:
    - ld2410_uart.h
  on_boot:
    priority: 600
    # ...
    then:
      - lambda: |-
          auto uart_component = static_cast<LD2410 *>(ld2410);
          uart_component->setNumbers(maxMovingDistanceRange, maxStillDistanceRange, noneDuration);

esp8266:
  board: d1_mini

# Enable logging
logger:
#  level: none
  baud_rate: 0 #disable logging over uart

api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "LD2410 Fallback Hotspot"


 
captive_portal:
i2c:
  sda: GPIO4
  scl: GPIO5
  scan: true
  id: bus_a
  
uart:
  id: uart1
  tx_pin: TX
  rx_pin: RX
  baud_rate: 256000 # Change this according to your setting
  parity: NONE
  stop_bits: 1
#  debug:
#    direction: BOTH
#    dummy_receiver: false
#    after:
#      delimiter: [0xF8,0xF7,0xF6,0xF5]
      
custom_component:
  - lambda: |-
      return {new LD2410(id(uart1))};
    components:
      - id: ld2410
      
binary_sensor:
  - platform: custom
    lambda: |-
      auto uart_component = static_cast<LD2410 *>(ld2410);
      return {uart_component->hasTarget,uart_component->hasMovingTarget,uart_component->hasStillTarget,uart_component->lastCommandSuccess};
    binary_sensors:
      - name: ${upper_devicename} Has Target
      - name: ${upper_devicename} Has Moving Target
      - name: ${upper_devicename} Has Still Target
      - name: ${upper_devicename} Last Command Success
  
  - platform: gpio
    id: human_presence_1_motion
    pin: 
      number: GPIO16  #D0
      mode: INPUT_PULLDOWN
    name: ${upper_devicename} human_presence
    device_class: presence
    
  - platform: gpio
    id: human_presence_1_PIR
    pin: GPIO12  #D6
    name: ${upper_devicename} human_presence_pir
    device_class: motion
    
    sensor:
  - platform: bh1750
    name: ${upper_devicename} Human Presence Illuminance
    address: 0x23
  filters:
    - calibrate_polynomial:
       degree: 2
       datapoints:
        # Map 0.0 (from sensor) to 0.0 (true value)
        - 0.0 -> 0.0
        - 0.6 -> 7
        - 8.3 -> 17
    update_interval: 60s    
      

  - platform: custom
    lambda: |-
      auto uart_component = static_cast<LD2410 *>(ld2410);
      return {uart_component->movingTargetDistance,uart_component->movingTargetEnergy,uart_component->stillTargetDistance,uart_component->stillTargetEnergy,uart_component->detectDistance};
    sensors:
      - name: "${upper_devicename} Moving Target Distance
        unit_of_measurement: "cm"
        accuracy_decimals: 0
      - name: ${upper_devicename} Moving Target Energy
        unit_of_measurement: "%"
        accuracy_decimals: 0
      - name: ${upper_devicename} Still Target Distance
        unit_of_measurement: "cm"
        accuracy_decimals: 0
      - name: ${upper_devicename} Still Target Energy
        unit_of_measurement: "%"
        accuracy_decimals: 0
      - name: ${upper_devicename} Detect Distance
        unit_of_measurement: "cm"
        accuracy_decimals: 0

number:        
  - platform: template
    name: ${upper_devicename} Max Moving Distance Range
    id: maxMovingDistanceRange
    min_value: 1
    max_value: 8
    step: 1
    update_interval: never
    optimistic: true
    set_action:
      - lambda: |-
          auto uart_component = static_cast<LD2410 *>(ld2410);
          uart_component->setMaxDistancesAndNoneDuration(x,id(maxStillDistanceRange).state,id(noneDuration).state);
  - platform: template
    name: ${upper_devicename} Max Still Distance Range
    id: maxStillDistanceRange
    min_value: 1
    max_value: 8
    step: 1
    update_interval: never
    optimistic: true
    set_action:
      - lambda: |-
          auto uart_component = static_cast<LD2410 *>(ld2410);
          uart_component->setMaxDistancesAndNoneDuration(id(maxMovingDistanceRange).state,x,id(noneDuration).state);
  - platform: template
    name: ${upper_devicename} None Duration
    id: noneDuration
    min_value: 0
    max_value: 32767
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    set_action:
      - lambda: |-
          auto uart_component = static_cast<LD2410 *>(ld2410);
          uart_component->setMaxDistancesAndNoneDuration(id(maxMovingDistanceRange).state,id(maxStillDistanceRange).state,x);
      

button:
  - platform: template
    name: ${upper_devicename} Reboot LD2410
    on_press:
      lambda: 'static_cast<LD2410 *>(ld2410)->reboot();'
  - platform: template
    name: ${upper_devicename} Turn on config mode
    on_press:
      - lambda: 'static_cast<LD2410 *>(ld2410)->setConfigMode(true);'
  - platform: template
    name: ${upper_devicename} Turn off config mode
    on_press:
      - lambda: 'static_cast<LD2410 *>(ld2410)->setConfigMode(false);'
  - platform: template
    name: ${upper_devicename} Get config
    on_press:
      - lambda: 'static_cast<LD2410 *>(ld2410)->queryParameters();'
   
  # - platform: template
  #   name: "Set baud rate to 256000"
  #   on_press:
  #     - lambda: 'static_cast<LD2410 *>(ld2410)->setBaudrate(7);'
  # - platform: template
  #   name: "Set baud rate to 115200"
  #   on_press:
  #     - lambda: 'static_cast<LD2410 *>(ld2410)->setBaudrate(5);'
  # - platform: template
  #   name: "Set baud rate to 9600"
  #   on_press:
  #     - lambda: 'static_cast<LD2410 *>(ld2410)->setBaudrate(1);'

